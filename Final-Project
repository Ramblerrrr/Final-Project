{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# NSD Final Project\n",
    "\n",
    "# Title: Dynamic hedging of single option with transaction costs: an optimization approach by  receding horizon control and stochastic programming.\n",
    "\n",
    "$$\n",
    "\\newcommand{\\supp}{\\mathrm{supp}}\n",
    "\\newcommand{\\E}{\\mathbb{E} }\n",
    "\\newcommand{\\Eof}[1]{\\mathbb{E}\\left[ #1 \\right]}\n",
    "\\def\\Cov{{ \\mbox{Cov} }}\n",
    "\\def\\Var{{ \\mbox{Var} }}\n",
    "\\newcommand{\\1}{\\mathbf{1} }\n",
    "\\newcommand{\\PP}{\\mathbb{P} }\n",
    "\\newcommand{\\Pof}[1]{\\mathbb{P}\\left[ #1 \\right]}\n",
    "%\\newcommand{\\Pr}{\\mathrm{Pr} }\n",
    "\\newcommand{\\QQ}{\\mathbb{Q} }\n",
    "\\newcommand{\\RR}{\\mathbb{R} }\n",
    "\\newcommand{\\DD}{\\mathbb{D} }\n",
    "\\newcommand{\\HH}{\\mathbb{H} }\n",
    "\\newcommand{\\spn}{\\mathrm{span} }\n",
    "\\newcommand{\\cov}{\\mathrm{cov} }\n",
    "\\newcommand{\\sgn}{\\mathrm{sgn} }\n",
    "\\newcommand{\\HS}{\\mathcal{L}_{\\mathrm{HS}} }\n",
    "%\\newcommand{\\HS}{\\mathrm{HS} }\n",
    "\\newcommand{\\trace}{\\mathrm{trace} }\n",
    "\\newcommand{\\LL}{\\mathcal{L} }\n",
    "%\\newcommand{\\LL}{\\mathrm{L} }\n",
    "\\newcommand{\\s}{\\mathcal{S} }\n",
    "\\newcommand{\\ee}{\\mathcal{E} }\n",
    "\\newcommand{\\ff}{\\mathcal{F} }\n",
    "\\newcommand{\\hh}{\\mathcal{H} }\n",
    "\\newcommand{\\bb}{\\mathcal{B} }\n",
    "\\newcommand{\\dd}{\\mathcal{D} }\n",
    "\\newcommand{\\g}{\\mathcal{G} }\n",
    "\\newcommand{\\p}{\\partial}\n",
    "\\newcommand{\\half}{\\frac{1}{2} }\n",
    "\\newcommand{\\T}{\\mathcal{T} }\n",
    "\\newcommand{\\bi}{\\begin{itemize}}\n",
    "\\newcommand{\\ei}{\\end{itemize}}\n",
    "\\newcommand{\\beq}{\\begin{equation}}\n",
    "\\newcommand{\\eeq}{\\end{equation}}\n",
    "\\newcommand{\\beas}{\\begin{eqnarray*}}\n",
    "\\newcommand{\\eeas}{\\end{eqnarray*}}\n",
    "\\newcommand{\\cO}{\\mathcal{O}}\n",
    "\\newcommand{\\cF}{\\mathcal{F}}\n",
    "\\newcommand{\\cL}{\\mathcal{L}}\n",
    "\\newcommand{\\BS}{\\text{BS}}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Abstract\n",
    "In this project, we extend the Black-Merton-Scholes dynamic hedging model proposed in class to make it closer to the real trading situation. We add transaction costs as constraints to the option trading model, then we use a new methodology for discrete time dynamic hedging with transaction costs. This methodology is an optimization approached by Receding horizon control and stochastic programming, which means a general method for investment could be found to make the stability of our investment reach the approximate maximum through the data simulation of Monte Carlo method, although all decisions are made in discrete time. Through comparing the simulation results with the traditional Black–Scholes delta hedging strategy, we can see the advantages of this methology in the investment with transaction costs."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Table of content \n",
    "* Introduction\n",
    "* Dynamic hedging problem overview \n",
    "    -  Black–Scholes delta hedging review \n",
    "* Receding horizon control and stochastic program (RHC&SP) hedging\n",
    "* An example on RHC&SP hedging\n",
    "    - Back test and comparison with Black–Scholes delta hedging\n",
    "* Conclusion and discussions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction\n",
    "Dynamic hedging has justifiably been the subject of more and more research within the finance community. We have learnd the traditional Black-Scholes dynamic hedging model in lecture 3 and 4, which is the earliest theory about it and can be used to perfectly hedge a short European call option. In the Black-Scholes dynamic hedging model, we could adjust the shares of underlying asset we hold to let the portfolio reach a continuous hedging relationship which achieves the highest stability. But in a way, this model is too idealistic. In the real hedging process, there will be transaction costs which makes the traditional dynamic hedging strategy can not perform perfectly. Moreover, this model is based on the assumption of continuity of the transaction time, and its strategy may not be reliable in the discrete time transaction.\n",
    "\n",
    "Therefore, we must consider our hedging process from a more general perspective, and we need to implement a strategy different from before.\n",
    "\n",
    "* First, We must be clear that we can only trade in discrete time when we are constructing models and designing strategies. It means we have to choose some independent time points and we can only adjust the number of holdings at these points. Also, We have to deduct the fee that should be paid at the time of each transaction, although we don't want to do so very much.\n",
    "\n",
    "* Second, because of transaction costs, it is difficult for us to get the recommended holding number to reach the optimal result directly. It is a good idea to divide the situation at each time point into several intervals, and then use the same number or strategy on each single interval, this is a good way to simplify our model. In fact, it is this simple idea that inspires the concrete implementation of RHC&SP hedging.\n",
    "\n",
    "* Third, to show that our improvement is actually effective, we need an indicator to evaluate hedging strategies. The dynamic hedging philosophy revolves around the objective of minimizing hedging error. Thus one performance metric that we examine is minimizing the expected hedging error, which we will introduce later. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dynamic hedging problem overview\n",
    "We have to clarify the general process of a  Dynamic hedging  first — within the consideration of the transaction costs. \n",
    "\n",
    "To begin with, we consider hedging a short European call option on one underlying asset.\n",
    "For simplicity, imagine that the value of the portfolio that we hold at the very beginning is 0. That is to say, we hold 1 call in short position and an amount in cash equal to the Black–Scholes valuation of this call option. As we are considering a discrete time dynamic hedging, we set several rebalancing points before option expiration. At each rebalancing point we adjust our hedging portfolio, which consists of the underlying asset and cash. Of course, the rebalancing must satisfy the self-financing condition.\n",
    "\n",
    "In order to lay out our system dynamics and objectives, we need to start with the definitions as follows:\n",
    "\n",
    "* $S(t)$  : $\\quad$the price of the underlying asset at time t\n",
    "* $c(t)$  :$\\quad$the Black–Scholes value of the call option at time t\n",
    "* $V(t)$  :$\\quad$the value of the hedging portfolio at time t\n",
    "* $T$    :$\\quad$time of expiration of the option\n",
    "* $K$   :$\\quad$strike price of the option\n",
    "* $r$   :$\\quad$risk free interest rate\n",
    "* $N$    :$\\quad$total number of portfolio rebalancings before option expiration\n",
    "* $dt$   :$\\quad$time step between portfolio rebalancing\n",
    "* $g$   :$\\quad$ transaction costs as a% of dollars transacted\n",
    "    \n",
    "Besides, given  information on the underlying asset available at each rebalancing time, a particular hedging methodology arrives at a recommended number of shares of the underlying to hold, which we call $\\Delta(t)$. (In other words, different hedging methodologies correspond to different $\\Delta(t)$.) Then we alter our hedging portfolio to hold this number of shares, pay the transaction costs,  and then place the remaining cash in the risk free asset. At each rebalancing point, we use $V(t-)$ to refer to the hedging portfolio value at time t before the trade is made and $V(t+)$ to refer to the hedging portfolio value at time t after the trade is made.\n",
    "\n",
    "So the general process of a Dynamic hedging with transaction costs can be laid out as follows:\n",
    "\\begin{eqnarray*}\n",
    "&&V(0-) = c_0\\\\\n",
    "&&V(0+) = \\Delta(0)S(0)+[V(0-)-\\Delta(0)S(0)-gS(0)|\\Delta(0)|]\\\\\n",
    "&&...\\\\\n",
    "&&V(t-) = \\Delta(t-dt)S(t)+[V((t-dt)+)-\\Delta(t-dt)S(t-dt)]e^{rdt}\\\\\n",
    "&&V(t+) = \\Delta(t)S(t)+[V(t-)-\\Delta(t)S(t)-gS(t)|\\Delta(t)-\\Delta(t-dt)|]\\\\\n",
    "&&...\\\\\n",
    "&&V(T) = \\Delta(T-dt)S(T)+[V((T-dt)+)-\\Delta(T-dt)S(T-dt)]e^{rdt}\n",
    "\\end{eqnarray*}\n",
    "\n",
    "\n",
    "\n",
    "Traditionally, the dynamic hedging philosophy revolves around the objective of minimizing hedging error, which is shown below:\n",
    "$$\n",
    "\\Eof{\\left|V(T) - c(T)\\right|}\n",
    "$$\n",
    "where $c(T)$ is $\\max\\{S(T)-K,0\\}$, and $V(T)$ is determined by the hedging process above.\n",
    "\n",
    "Generally speaking, our dynamic hedging strategy will show its effect only when we suffer losses, so we can also set our goal to maximize:\n",
    "$$\n",
    "\\Eof{V(T) - c(T)}\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Black–Scholes delta hedging review\n",
    "As we have discussed in Lec03, by maintaining the delta neutrality of the portfolio, we can perform a dynamic hedging. It can be regarded as a special case of the process above, without considering the transaction costs. Specifically, at time $t$, the recommended shares of the underlying to hold $\\Delta(t)$ is\n",
    "\n",
    "$$\n",
    "\\Delta(t) = \\left.\\frac{\\partial c}{\\partial S}\\right|_{t} =N(d_1)= N\\left(\\frac{\\ln(S(t)/K)+(r+\\sigma^2/2)(T-t)}{\\sigma \\sqrt{T-t}}\\right)\n",
    "$$\n",
    "where $N(\\cdot)$ is the distribution function of standard normal distribution.\n",
    "\n",
    "In addition, let $g = 0$, The Black–Scholes delta dynamic hedging process can be expressed as:\n",
    "\\begin{eqnarray*}\n",
    "&&V(0-) = c_0\\\\\n",
    "&&V(0+) = N\\left(\\frac{\\ln(S(0)/K)+(r+\\sigma^2/2)(T)}{\\sigma \\sqrt{T}}\\right)S(0)+[V(0-)-N\\left(\\frac{\\ln(S(0)/K)+(r+\\sigma^2/2)(T)}{\\sigma \\sqrt{T}}\\right)S(0)]\\\\\n",
    "&&...\\\\\n",
    "&&V(t-) = N\\left(\\frac{\\ln(S(t-dt)/K)+(r+\\sigma^2/2)(T-t+dt)}{\\sigma \\sqrt{T-t+dt}}\\right)S(t)+[V((t-dt)+)-N\\left(\\frac{\\ln(S(t-dt)/K)+(r+\\sigma^2/2)(T-t+dt)}{\\sigma \\sqrt{T-t+dt}}\\right)S(t-dt)]e^{rdt}\\\\\n",
    "&&V(t+) = N\\left(\\frac{\\ln(S(t)/K)+(r+\\sigma^2/2)(T-t)}{\\sigma \\sqrt{T-t}}\\right)S(t)+[V(t-)-N\\left(\\frac{\\ln(S(t)/K)+(r+\\sigma^2/2)(T-t)}{\\sigma \\sqrt{T-t}}\\right)S(t)]\\\\\n",
    "&&...\\\\\n",
    "&&V(T) = N\\left(\\frac{\\ln(S(T-dt)/K)+(r+\\sigma^2/2)(dt)}{\\sigma \\sqrt{dt}}\\right)S(T)+[V((T-dt)+)-N\\left(\\frac{\\ln(S(T-dt)/K)+(r+\\sigma^2/2)(dt)}{\\sigma \\sqrt{dt}}\\right)S(T-dt)]e^{rdt}\n",
    "\\end{eqnarray*}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Receding horizon control and stochastic program hedging\n",
    "Black–Scholes delta dynamic hedging is a local optimal solution to some degree. However, as we move away from the conditions set forth by Black–Scholes to a more realistic setting (transaction costs for example) , the solutions are not optimal and performance leaves room for improvement. That's why we introduce other dynamic hedging methodologies. \n",
    "\n",
    "Here we introduce an optimization approach, which is the mixture of stochastic programming and a method from control theory called Receding Horizon Control (RHC) [1]. We call this hedging methology RHC&SP hedging for short. Just like our title, the core of this hedging methology is \"optimization\", which means that we have not selected a specific $\\Delta(t)$ calculation method in advance like delta hedging. But for a specific asset, we let it produce a series of $\\Delta(t)$ for us through model construction and computer simulation.\n",
    "\n",
    "First, let's introduce some background."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Receding horizon control\n",
    "RHC is a feedback control technique, with which an optimization problem is solved at each time step to determine a plan of action over a fixed time horizon. The first input from this plan is applied to the system. At the next time step we repeat the planning process, solving a new optimization problem with the time horizon shifted one step forward [2].\n",
    "\n",
    "Typically, when applying RHC to our optimization problems, with our objective of minimizing hedge error, this can be:\n",
    "$$\n",
    "\\Delta(t) = argmax \\Eof{\\hat{V}(t') - c(t')|S(t)}\n",
    "$$\n",
    "where $t'$ is the next rebalancing point after time $t$, and $\\hat{V}$ is the  estimated portfolio.\n",
    "\n",
    "Note that this traditional version of RHC requires us to estimate values, which is a great difficulty. Even if we do a lot of simulations to estimate the value expectation, it needs to be carried out in every case at each rebalancing point. It is conceivable that the amount of computation must be exponential.\n",
    "\n",
    "To deal with this problem, We add a final time horizon to expiry. This means that in the process of optimization, we play the role of a prophet. Instead of estimating the portfolio value at the next rebalancing point, we get the final objective value directly. So how do we realise it? We will introduce it in detail later."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### hedging with stochastic programming\n",
    "\n",
    "Stochastic programming is a generalization of linear programming. It is a linear programming problem where the coefficients in the constraints and the parameters in the objective function are random variables. \n",
    "\n",
    "As far as our problem is concerned. Our goal is to minimize the hedge error, which can also be considered as maximizing this expression:\n",
    "$$\n",
    "\\Eof{V(T) - c(T)}\n",
    "$$\n",
    "\n",
    "Note that it is not a definite linear expression, but the expectation of a random variable. This is because the price of the underlying asset is uncertain (for example, generally, we believe that it obeys geometric Brownian motion). Moreover, since our constraints are related to the price of the underlying asset, they are also composed of random variables. Because of these, our optimization problem is actually a random programming, not an ordinary linear programming.\n",
    "\n",
    "So how do we solve an stochastic programming problem? In this problem, we use the Monte Carlo simulation approach to stochastic programming, which helps us turn the Stochastic programming problem into a linear programming problem problem [3]. This method means that we have to do a lot of repeated experiments to simulate the path of the underlying asset price, which we call Monte Carlo simulations. (We write the number of simulations as $M$). In this way, each simulation is a definite linear programming system. And then we set our optimization goal as maximizing this expression:\n",
    "$$\n",
    "\\sum_i^{M}(V_i(T) - c_i(T))\n",
    "$$\n",
    "where $V_i(T)$ and $c_i(T)$ stand for the results of the simulation No.i.\n",
    "\n",
    "Note that we do not directly optimize each simulation, but take all variables of these simulations into account to maximize the above expression. It doesn't seem easy. We use Python's gurobipy module to help us achieve this optimization."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Description of RHC&SP hedging process\n",
    "\n",
    "Perhaps what is said above is so abstract that readers think we are talking too much. Then let's explain how the optimization process is implemented — without anything to bluff. \n",
    "\n",
    "The first step is fixing the number of rebalancing points we will include in our optimization, which in our examples is typically two to three. We write $h$ as  the number of time steps. Generally, we set all the time steps except for the final time step to be of size $dt$ although other sizes also generate high levels of performance. \n",
    "\n",
    "We also need to decide upon the number of decision variables at each time step. We store the number of decision variables in a vector called Bins which is of size $h$. Each decision variable corresponds to the number of shares of the underlying to hold at a particular time when the underlying is in a particular price range. For example ,if Bins = [1 5 3] , this means that we have three rebalancing points, and the number of decision variables at each rebalancing point is 1 ,5 and 3. Note that the elements in bins are not decision variables, but the number of decision variables at that time point. Decision variables are the parameters in our optimization problem, but the number of decision variables is set in advance.\n",
    "\n",
    "Let's specifically introduce how decision variables work. Each decision variable is recommended number of shares of the underlying to hold. For example, we consider the third element 3 in Bins, which corresponds to three decision variables. We record the three decision variables as $x_1$, $x_2$ and $x_3$ respectively. Then ,at the third rebalancing point, we divide the price range into 3 ranges (Bingo! the number 3 corresponds to the third element 3 in Bins). The division can be expressed as:\n",
    "$$\n",
    "[0,p_1),\\quad[p_1,p_2),\\quad[p_2,+\\infty)\n",
    "$$\n",
    "\n",
    "They exactly correspond to the 3 decision variables. So we can gain $\\Delta(t)$ as:\n",
    "$$\n",
    "\\Delta(t) = x_i \\quad if \\quad S(t) \\in [p_{i-1},p_i)\n",
    "$$\n",
    "where $i = 1,2,3$, and we supplementary definite $p_0$ as $0$ and $p_4$ as $+\\infty$ . And the situation is similar at other rebalancing points.\n",
    "\n",
    "This raises another question, at each rebalancing point, how do we determine $p_i$? In order to make our distribution as uniform as possible, we introduce such a method. We observe the results of Monte Carlo simulation and set the upper and lower limits for our distribution range. We don't really care about the prices below the lower limit or above the higher limit. Later, we will classify them into the nearest group later. The lower limit $L(t)$ and the higher limit $H(t)$ is definited as:\n",
    "\\begin{eqnarray*}\n",
    "H(t) &&= 99\\text{th percentile of asset prices from simulations at time t}\\\\\n",
    "L(t) &&= 1\\text{st percentile of asset prices from simulations at time t}\n",
    "\\end{eqnarray*}\n",
    "\n",
    "The range in the middle of the higher and lower limits is evenly distributed to each decision variable. Then $p_i$ can be defined as follows:\n",
    "\\begin{eqnarray*}\n",
    "width(t) &&= (H(t)-L(t))/Bins(t)\\\\\n",
    "p_0 &&= 0\\\\\n",
    "p_i &&= L(t)+i\\times width(t) \\quad i = 1,2\\cdots Bins(t)\\\\\n",
    "p_{Bins(t)+1} &&= +\\infty\\\\\n",
    "\\end{eqnarray*}\n",
    "\n",
    "In this way, we have made clear all about decision variables.\n",
    "\n",
    "Then we can get the optimization objectives and all constraints of our hedging strategy, the optimization problem can be expressed as:\n",
    "\\begin{eqnarray*}\n",
    "\\max &&[\\frac{1}{M}\\sum_{i=1}^{M}(V_i(T)-c_i(T))]\\\\\n",
    "    && s.t.\\\\\n",
    "V(0-) &&= c_0\\\\\n",
    "V(0+) &&= x_i(0)S(0)+[V(0-)-x_i(0)S(0)-gS(0)|x_i(0)|]\\\\\n",
    "&&...\\\\\n",
    "V(t-) &&= x_i(t-dt)S(t)+[V((t-dt)+)-x_i(t-dt)S(t-dt)]e^{rdt}\\\\\n",
    "V(t+) &&= x_i(t)S(t)+[V(t-)-x_i(t)S(t)-gS(t)|x_i(t)-x_i(t-dt)|]\\\\\n",
    "&&...\\\\\n",
    "V(T)  &&= x_i(T-dt)S(T)+[V((T-dt)+)-x_i(T-dt)S(T-dt)]e^{rdt}\n",
    "\\end{eqnarray*}\n",
    "\n",
    "Where $x_i(t)$ is the corresponding decision variable at the specific time and the specific simulation. Its determination method is just as we described above, and there is no need to repeat it.\n",
    "\n",
    "This is a nonlinear program and can take a significant amount of time to solve when the amount of data is large. If the optimization problem can still be  computational, we directly solve it. Once it exceeds our computing power, RHC comes in handy."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## An example on RHC&SP hedging\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "from math import log,sqrt,exp\n",
    "np.random.seed(3333333)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the most basic case, our underlying asset follows geometric Brownian motion and thus behaves as:\n",
    "$$\n",
    "dS(t) = \\mu S(t) dt+ \\sigma S(t) d W_t\n",
    "$$\n",
    "where\n",
    "\n",
    "- $\\mu$: (constant) expected return \n",
    "- $\\sigma$: (constant) volatility \n",
    "- $W_t$: standard Brownian motion\n",
    "\n",
    "Note that $S_t$ has the closed form expression\n",
    "\n",
    "$$\n",
    "S_t = S_0 e^{\\left(\\mu - \\frac{\\sigma^2}2 \\right) t+ \\sigma W_t}\n",
    "$$\n",
    "So we can simulate the GBM of our underlying asset as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>91</th>\n",
       "      <th>92</th>\n",
       "      <th>93</th>\n",
       "      <th>94</th>\n",
       "      <th>95</th>\n",
       "      <th>96</th>\n",
       "      <th>97</th>\n",
       "      <th>98</th>\n",
       "      <th>99</th>\n",
       "      <th>100</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>100</td>\n",
       "      <td>101.405384</td>\n",
       "      <td>100.178337</td>\n",
       "      <td>103.616873</td>\n",
       "      <td>106.228693</td>\n",
       "      <td>105.585788</td>\n",
       "      <td>107.255558</td>\n",
       "      <td>107.600233</td>\n",
       "      <td>110.543478</td>\n",
       "      <td>112.757931</td>\n",
       "      <td>...</td>\n",
       "      <td>120.637677</td>\n",
       "      <td>118.339067</td>\n",
       "      <td>120.950806</td>\n",
       "      <td>118.882438</td>\n",
       "      <td>119.627263</td>\n",
       "      <td>120.044973</td>\n",
       "      <td>122.483505</td>\n",
       "      <td>123.261533</td>\n",
       "      <td>124.891371</td>\n",
       "      <td>124.387177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>100</td>\n",
       "      <td>98.663444</td>\n",
       "      <td>98.919356</td>\n",
       "      <td>96.565446</td>\n",
       "      <td>94.504943</td>\n",
       "      <td>96.050160</td>\n",
       "      <td>95.707867</td>\n",
       "      <td>95.571594</td>\n",
       "      <td>95.072128</td>\n",
       "      <td>97.121557</td>\n",
       "      <td>...</td>\n",
       "      <td>104.261543</td>\n",
       "      <td>103.796591</td>\n",
       "      <td>101.933913</td>\n",
       "      <td>102.783674</td>\n",
       "      <td>102.327074</td>\n",
       "      <td>102.708939</td>\n",
       "      <td>102.099863</td>\n",
       "      <td>101.690618</td>\n",
       "      <td>101.521802</td>\n",
       "      <td>101.083208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>100</td>\n",
       "      <td>101.195996</td>\n",
       "      <td>103.119683</td>\n",
       "      <td>103.862361</td>\n",
       "      <td>107.111456</td>\n",
       "      <td>106.549582</td>\n",
       "      <td>107.028478</td>\n",
       "      <td>107.778699</td>\n",
       "      <td>107.273154</td>\n",
       "      <td>106.133063</td>\n",
       "      <td>...</td>\n",
       "      <td>96.978299</td>\n",
       "      <td>97.417939</td>\n",
       "      <td>98.502059</td>\n",
       "      <td>98.263643</td>\n",
       "      <td>98.392650</td>\n",
       "      <td>98.176275</td>\n",
       "      <td>95.971568</td>\n",
       "      <td>96.049154</td>\n",
       "      <td>95.576308</td>\n",
       "      <td>95.134793</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>100</td>\n",
       "      <td>101.022373</td>\n",
       "      <td>101.603626</td>\n",
       "      <td>100.149910</td>\n",
       "      <td>99.398529</td>\n",
       "      <td>98.720151</td>\n",
       "      <td>99.646943</td>\n",
       "      <td>99.820806</td>\n",
       "      <td>102.380946</td>\n",
       "      <td>102.092217</td>\n",
       "      <td>...</td>\n",
       "      <td>96.044015</td>\n",
       "      <td>95.308620</td>\n",
       "      <td>95.491278</td>\n",
       "      <td>95.260777</td>\n",
       "      <td>95.165658</td>\n",
       "      <td>94.827381</td>\n",
       "      <td>95.715683</td>\n",
       "      <td>93.646837</td>\n",
       "      <td>94.991555</td>\n",
       "      <td>95.720995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>100</td>\n",
       "      <td>99.083501</td>\n",
       "      <td>100.240481</td>\n",
       "      <td>100.577953</td>\n",
       "      <td>100.205828</td>\n",
       "      <td>100.335359</td>\n",
       "      <td>103.112172</td>\n",
       "      <td>103.311523</td>\n",
       "      <td>103.034164</td>\n",
       "      <td>103.865589</td>\n",
       "      <td>...</td>\n",
       "      <td>102.801787</td>\n",
       "      <td>101.738336</td>\n",
       "      <td>99.846013</td>\n",
       "      <td>96.690299</td>\n",
       "      <td>97.922116</td>\n",
       "      <td>97.431947</td>\n",
       "      <td>98.021177</td>\n",
       "      <td>98.848243</td>\n",
       "      <td>98.729978</td>\n",
       "      <td>97.674446</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>295</th>\n",
       "      <td>100</td>\n",
       "      <td>98.947831</td>\n",
       "      <td>99.844767</td>\n",
       "      <td>101.793332</td>\n",
       "      <td>100.960163</td>\n",
       "      <td>99.251986</td>\n",
       "      <td>98.203732</td>\n",
       "      <td>99.523928</td>\n",
       "      <td>99.584420</td>\n",
       "      <td>98.834245</td>\n",
       "      <td>...</td>\n",
       "      <td>102.705188</td>\n",
       "      <td>104.905659</td>\n",
       "      <td>105.248579</td>\n",
       "      <td>105.344766</td>\n",
       "      <td>106.222066</td>\n",
       "      <td>105.808412</td>\n",
       "      <td>106.689756</td>\n",
       "      <td>105.771740</td>\n",
       "      <td>105.137627</td>\n",
       "      <td>105.783174</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>100</td>\n",
       "      <td>102.552449</td>\n",
       "      <td>102.417644</td>\n",
       "      <td>102.611649</td>\n",
       "      <td>102.915857</td>\n",
       "      <td>103.468866</td>\n",
       "      <td>103.682519</td>\n",
       "      <td>101.696423</td>\n",
       "      <td>101.897650</td>\n",
       "      <td>100.372853</td>\n",
       "      <td>...</td>\n",
       "      <td>116.327460</td>\n",
       "      <td>116.997676</td>\n",
       "      <td>115.922214</td>\n",
       "      <td>115.553568</td>\n",
       "      <td>116.076033</td>\n",
       "      <td>116.210391</td>\n",
       "      <td>117.062126</td>\n",
       "      <td>117.996005</td>\n",
       "      <td>118.523830</td>\n",
       "      <td>118.847782</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>100</td>\n",
       "      <td>101.106308</td>\n",
       "      <td>102.223835</td>\n",
       "      <td>102.282409</td>\n",
       "      <td>103.955360</td>\n",
       "      <td>104.486539</td>\n",
       "      <td>103.020099</td>\n",
       "      <td>101.981872</td>\n",
       "      <td>102.566668</td>\n",
       "      <td>103.895962</td>\n",
       "      <td>...</td>\n",
       "      <td>111.546030</td>\n",
       "      <td>111.972045</td>\n",
       "      <td>113.432689</td>\n",
       "      <td>113.640900</td>\n",
       "      <td>111.712173</td>\n",
       "      <td>111.399928</td>\n",
       "      <td>108.362561</td>\n",
       "      <td>106.522629</td>\n",
       "      <td>107.214850</td>\n",
       "      <td>107.263977</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>100</td>\n",
       "      <td>100.468105</td>\n",
       "      <td>98.665958</td>\n",
       "      <td>96.887717</td>\n",
       "      <td>96.410848</td>\n",
       "      <td>98.198899</td>\n",
       "      <td>96.366456</td>\n",
       "      <td>96.276205</td>\n",
       "      <td>96.299949</td>\n",
       "      <td>95.652335</td>\n",
       "      <td>...</td>\n",
       "      <td>83.558432</td>\n",
       "      <td>84.146787</td>\n",
       "      <td>84.253111</td>\n",
       "      <td>84.951584</td>\n",
       "      <td>84.820157</td>\n",
       "      <td>84.820120</td>\n",
       "      <td>85.611540</td>\n",
       "      <td>85.730221</td>\n",
       "      <td>83.483584</td>\n",
       "      <td>83.330518</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>100</td>\n",
       "      <td>100.603336</td>\n",
       "      <td>102.238185</td>\n",
       "      <td>102.424185</td>\n",
       "      <td>103.066117</td>\n",
       "      <td>102.588991</td>\n",
       "      <td>104.367026</td>\n",
       "      <td>106.255735</td>\n",
       "      <td>106.496528</td>\n",
       "      <td>106.633448</td>\n",
       "      <td>...</td>\n",
       "      <td>86.159028</td>\n",
       "      <td>86.770479</td>\n",
       "      <td>86.819395</td>\n",
       "      <td>87.296287</td>\n",
       "      <td>88.249483</td>\n",
       "      <td>88.814440</td>\n",
       "      <td>90.094591</td>\n",
       "      <td>90.157996</td>\n",
       "      <td>90.554745</td>\n",
       "      <td>90.090323</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>300 rows × 101 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     0           1           2           3           4           5    \\\n",
       "0    100  101.405384  100.178337  103.616873  106.228693  105.585788   \n",
       "1    100   98.663444   98.919356   96.565446   94.504943   96.050160   \n",
       "2    100  101.195996  103.119683  103.862361  107.111456  106.549582   \n",
       "3    100  101.022373  101.603626  100.149910   99.398529   98.720151   \n",
       "4    100   99.083501  100.240481  100.577953  100.205828  100.335359   \n",
       "..   ...         ...         ...         ...         ...         ...   \n",
       "295  100   98.947831   99.844767  101.793332  100.960163   99.251986   \n",
       "296  100  102.552449  102.417644  102.611649  102.915857  103.468866   \n",
       "297  100  101.106308  102.223835  102.282409  103.955360  104.486539   \n",
       "298  100  100.468105   98.665958   96.887717   96.410848   98.198899   \n",
       "299  100  100.603336  102.238185  102.424185  103.066117  102.588991   \n",
       "\n",
       "            6           7           8           9    ...         91   \\\n",
       "0    107.255558  107.600233  110.543478  112.757931  ...  120.637677   \n",
       "1     95.707867   95.571594   95.072128   97.121557  ...  104.261543   \n",
       "2    107.028478  107.778699  107.273154  106.133063  ...   96.978299   \n",
       "3     99.646943   99.820806  102.380946  102.092217  ...   96.044015   \n",
       "4    103.112172  103.311523  103.034164  103.865589  ...  102.801787   \n",
       "..          ...         ...         ...         ...  ...         ...   \n",
       "295   98.203732   99.523928   99.584420   98.834245  ...  102.705188   \n",
       "296  103.682519  101.696423  101.897650  100.372853  ...  116.327460   \n",
       "297  103.020099  101.981872  102.566668  103.895962  ...  111.546030   \n",
       "298   96.366456   96.276205   96.299949   95.652335  ...   83.558432   \n",
       "299  104.367026  106.255735  106.496528  106.633448  ...   86.159028   \n",
       "\n",
       "            92          93          94          95          96          97   \\\n",
       "0    118.339067  120.950806  118.882438  119.627263  120.044973  122.483505   \n",
       "1    103.796591  101.933913  102.783674  102.327074  102.708939  102.099863   \n",
       "2     97.417939   98.502059   98.263643   98.392650   98.176275   95.971568   \n",
       "3     95.308620   95.491278   95.260777   95.165658   94.827381   95.715683   \n",
       "4    101.738336   99.846013   96.690299   97.922116   97.431947   98.021177   \n",
       "..          ...         ...         ...         ...         ...         ...   \n",
       "295  104.905659  105.248579  105.344766  106.222066  105.808412  106.689756   \n",
       "296  116.997676  115.922214  115.553568  116.076033  116.210391  117.062126   \n",
       "297  111.972045  113.432689  113.640900  111.712173  111.399928  108.362561   \n",
       "298   84.146787   84.253111   84.951584   84.820157   84.820120   85.611540   \n",
       "299   86.770479   86.819395   87.296287   88.249483   88.814440   90.094591   \n",
       "\n",
       "            98          99          100  \n",
       "0    123.261533  124.891371  124.387177  \n",
       "1    101.690618  101.521802  101.083208  \n",
       "2     96.049154   95.576308   95.134793  \n",
       "3     93.646837   94.991555   95.720995  \n",
       "4     98.848243   98.729978   97.674446  \n",
       "..          ...         ...         ...  \n",
       "295  105.771740  105.137627  105.783174  \n",
       "296  117.996005  118.523830  118.847782  \n",
       "297  106.522629  107.214850  107.263977  \n",
       "298   85.730221   83.483584   83.330518  \n",
       "299   90.157996   90.554745   90.090323  \n",
       "\n",
       "[300 rows x 101 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Simulation of GBM\n",
    "#dSt/St = mu dt + sigma dBt\n",
    "def GBM(mu,sigma,S0,Tfin,NSim = 300):\n",
    "     NSteps = 100\n",
    "     B = pd.DataFrame(index = [k for k in range(NSim)]\\\n",
    "                 ,columns = [k for k in range(NSteps+1)])\n",
    "     B = B.fillna(0)\n",
    "     S = pd.DataFrame(index = [k for k in range(NSim)]\\\n",
    "                 ,columns = [k for k in range(NSteps+1)])\n",
    "     S = S.fillna(0)\n",
    "     S[0] = pd.Series([S0]*NSim)\n",
    "\n",
    "     for i in range(NSteps):\n",
    "          dB = pd.Series(np.random.randn(1,NSim)[0])\n",
    "          dB = dB-dB.mean()\n",
    "          dB = dB/dB.std()\n",
    "          dB = sqrt(Tfin/NSteps)*dB\n",
    "          B[i+1] = B[i] + dB\n",
    "\n",
    "          t = (Tfin/NSteps)*(i+1)\n",
    "          S[i+1] = B[i+1].apply(lambda x: S0*exp((mu-sigma*sigma/2)*t +sigma*x))\n",
    "     return S\n",
    "\n",
    "GBM(0.15,0.25,100,1/4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For preparations, we provide the code of Black-Scholes formula in advance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#The Black-Scholes formula\n",
    "def bs_call(s,K,sigma,t,r=0,d=0):\n",
    "     d1 = (log(s/K)+(r-d)*t)/(sigma*sqrt(t)) + sigma*sqrt(t)/2\n",
    "     d2 = d1 - sigma*sqrt(t)\n",
    "\n",
    "     c = s*exp(-d*t)*stats.norm.cdf(d1) - K*exp(-r*t)*stats.norm.cdf(d2)\n",
    "     delta = exp(-d*t)*stats.norm.cdf(d1)\n",
    "     Gam = stats.norm.pdf(d1)/s/sigma/sqrt(t)\n",
    "\n",
    "     return pd.Series({'c':c,'delta':delta,'Gam':Gam})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Besides, we need to define a function that can return a distribution of the price range, given the number of decision variables and the results of the Monte Carlo simulations. Note that Bins[t] is the number of decision variables at time t."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(0, 90.9215878431816), (90.9215878431816, 97.62528534239404), (97.62528534239404, 104.32898284160646), (104.32898284160646, 111.0326803408189), (111.0326803408189, inf)]\n",
      "[(0, 97.13954167204612), (97.13954167204612, 113.86126947372068), (113.86126947372068, inf)]\n"
     ]
    }
   ],
   "source": [
    "def distribute(S,t,NSim = 300):\n",
    "     NSteps = 100\n",
    "     h = len(Bins)\n",
    "     St = S[t*(NSteps//h)]\n",
    "     St1 = list(St.sort_values())\n",
    "     L = St1[:int(NSim*0.01)][-1]\n",
    "     H = St1[:int(NSim*0.99)][-1]\n",
    "\n",
    "     bint = Bins[t]\n",
    "     width = (H-L)/bint\n",
    "\n",
    "     distribution = []\n",
    "     distribution.append((0,L+width))\n",
    "     for j in range(1,bint-1):\n",
    "          distribution.append((L+j*width,L+(j+1)*width))\n",
    "     distribution.append((L+(bint-1)*width,float('+inf')))\n",
    "\n",
    "     return distribution\n",
    "    \n",
    "Bins = [1,5,3]\n",
    "S = GBM(0.15,0.25,100,1/4)   \n",
    "print(distribute(S,1))\n",
    "print(distribute(S,2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, let's set up some basic numbers and start a model.\n",
    "\n",
    "Here, we choose [1 5 3] as our Bins which means that there are three rebalancing points before expiration and the number of decision variables at each rebalancing point are 1,5 and 3. As the same time, we set the number of samples as 300, which means the number of Monte Carlo simulation paths of the underlying asset is 300."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "Bins = [1,5,3]\n",
    "h = len(Bins)\n",
    "mu = 0.15\n",
    "sigma = 0.5 #we set a relatively large volatility\n",
    "S0 = 100\n",
    "K = 100\n",
    "T = 3/24 #one and a half months, we adjust V(t) every half a month\n",
    "r = 0.03\n",
    "g = 0.005\n",
    "NSim = 300"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Restricted license - for non-production use only - expires 2022-01-13\n"
     ]
    }
   ],
   "source": [
    "from gurobipy import *\n",
    "\n",
    "sp_model = Model('Stochastic Programming')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's start by adding variables to the optimization model. The variables we need to add include all the decision variables corresponding  to the elements in Bins and the value of hedging portfolio at each rebalancing point. It should be noted that we need to distinguish the value V (T -) before trade is made from the value $V (T +)$ after the trade is made, but since $V (0 -)$ is fixed as the B-S value of the call at time 0, we don't have to take it as a variable.\n",
    "\n",
    "Here is another point to note. Technically, we need to set the difference between the decision variables on two adjacent rebalancing points and their absolute values as new variables. Then we add \"absolute value constraints\" between them. This is because of the syntax limitations of module gurobipy, but the basic idea has not changed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "S = GBM(mu,sigma,S0,T,NSim=NSim)#Regenerate S\n",
    "\n",
    "def target():\n",
    "    money_list = [Vit[i,Vnum-1]-max((S[100][i]-K),0) for i in range(NSim)]\n",
    "    return sum(money_list)/NSim\n",
    "\n",
    "\n",
    "#set variables: Vi(0+),Vi(1-),Vi(1+)......Vi(t-),Vi(t+)......Vi(T)\n",
    "Vnum = 2 * len(Bins) # The total number of Vi(t)\n",
    "Vit={}\n",
    "for i in range(NSim): \n",
    "    for j in range(Vnum):\n",
    "        Vit[i,j] = sp_model.addVar(lb = 0,ub=GRB.INFINITY, vtype = GRB.CONTINUOUS, name = 'V_' + str(i)  +'_'+ str(j))\n",
    "\n",
    "#set variables: x\n",
    "x = {} \n",
    "for i in range(len(Bins)): \n",
    "    for j in range(Bins[i]):\n",
    "        x[i,j] = sp_model.addVar(lb = 0,ub=GRB.INFINITY, vtype = GRB.CONTINUOUS, name = 'delta_' + str(i)  +'_'+ str(j))\n",
    "\n",
    "#We need some additional variables to express abs_ of other variables.\n",
    "#We will set the abs_ constraints later.\n",
    "x_abs = {}#abs(x-y)\n",
    "x_diff = {}#(x-y)\n",
    "for i in range(len(Bins)-1):\n",
    "    for j in range(Bins[i]):\n",
    "        for k in range(Bins[i+1]):\n",
    "            x_abs[i,j,k] = sp_model.addVar(lb = 0,ub=GRB.INFINITY, vtype = GRB.CONTINUOUS, name = 'abs_'+str(i)+'_'+str(j))\n",
    "            x_diff[i,j,k] = sp_model.addVar(lb = 0,ub=GRB.INFINITY, vtype = GRB.CONTINUOUS, name = 'diff_'+str(i)+'_'+str(j))\n",
    "            \n",
    "sp_model.setObjective(target(),GRB.MAXIMIZE)\n",
    "\n",
    "#set the abs_ constraints\n",
    "for i in range(len(Bins)-1):\n",
    "    for j in range(Bins[i]):\n",
    "        for k in range(Bins[i+1]):\n",
    "            sp_model.addConstr(x_diff[i,j,k]==\\\n",
    "                               x[i,j]-x[i+1,k],name = 'diff_cons'+str(i)+'_'+str(j)+'_'+str(k))\n",
    "            sp_model.addConstr(x_abs[i,j,k]==\\\n",
    "                               abs_(x_diff[i,j,k]),name = 'abs_cons'+str(i)+'_'+str(j)+'_'+str(k))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we add the constraints of optimization. In fact, it is just the general process of dynamic hedging we have introduced earlier. Here, we determine $\\Delta(t)$ according to the results of each Monte Carlo simulation and the corresponding decision variables. Once we have done all of these, the module of gurobipy will help us to find the optimal decision variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Set control conditions\n",
    "\n",
    "#get the distribution\n",
    "distribution1 = distribute(S,1)\n",
    "distribution2 = distribute(S,2)\n",
    "\n",
    "#define a decision function\n",
    "def choose(price,t):\n",
    "    distribution = distribution1 if t == 1 else distribution2\n",
    "    for i in range(Bins[t]):\n",
    "        if distribution[i][0]<price and distribution[i][1]>=price:\n",
    "            return i\n",
    "\n",
    "c0 = bs_call(S0,K,sigma,T,r=0.03)['c']\n",
    "\n",
    "for i in range(NSim):#300 simulations\n",
    "    #the decision index\n",
    "    index1 = choose(S[33][i],1)\n",
    "    index2 = choose(S[66][i],2)\n",
    "    \n",
    "    #control condition at time 0\n",
    "    sp_model.addConstr(Vit[i,0]==x[0,0]*S[0][i]+(c0-x[0,0]*S[0][i]\\\n",
    "            -g*x[0,0]*S[0][i]),name = 'cons_'+str(i)+'_'+str(0))\n",
    "\n",
    "    #control conditions at time 1\n",
    "    sp_model.addConstr(Vit[i,1]==x[0,0]*S[33][i]+(c0-x[0,0]*S[0][i]\\\n",
    "            -g*x[0,0]*S[0][i])*exp(T*r*33/100),name = 'cons_'+str(i)+'_'+str(1))\n",
    "    sp_model.addConstr(Vit[i,2]==x[1,index1]*S[33][i] +(Vit[i,1]\\\n",
    "            -x[1,index1]*S[33][i]-g*S[33][i]*x_abs[0,0,index1]),name = 'cons_'+str(i)+'_'+str(2))\n",
    "\n",
    "    #control conditions at time 2\n",
    "    sp_model.addConstr(Vit[i,3]==x[1,index1]*S[66][i] +(Vit[i,1]\\\n",
    "            -x[1,index1]*S[33][i]-g*S[33][i]*x_abs[0,0,index1])*exp(T*r*33/100),name = 'cons_'+str(i)+'_'+str(3))\n",
    "    sp_model.addConstr(Vit[i,4]==x[2,index2]*S[66][i] +(Vit[i,3]\\\n",
    "            -x[2,index2]*S[66][i]-g*S[66][i]*x_abs[1,index1,index2]) ,name = 'cons_'+str(i)+'_'+str(4))\n",
    "\n",
    "    #control condition at time 3\n",
    "    sp_model.addConstr(Vit[i,5]==x[2,index2]*S[100][i] +(Vit[i,3]\\\n",
    "             -x[2,index2]*S[66][i]-g*S[66][i]*x_abs[1,index1,index2])*exp(T*r*34/100),name = 'cons_'+str(i)+'_'+str(5))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gurobi Optimizer version 9.1.2 build v9.1.2rc0 (win64)\n",
      "Thread count: 6 physical cores, 12 logical processors, using up to 12 threads\n",
      "Optimize a model with 1820 rows, 1849 columns and 5460 nonzeros\n",
      "Model fingerprint: 0x0212f7c9\n",
      "Model has 20 general constraints\n",
      "Variable types: 1849 continuous, 0 integer (0 binary)\n",
      "Coefficient statistics:\n",
      "  Matrix range     [2e-03, 4e+01]\n",
      "  Objective range  [3e-03, 3e-03]\n",
      "  Bounds range     [0e+00, 0e+00]\n",
      "  RHS range        [7e+00, 7e+00]\n",
      "Presolve removed 1794 rows and 1839 columns\n",
      "Presolve time: 0.02s\n",
      "Presolved: 26 rows, 10 columns, 65 nonzeros\n",
      "Variable types: 10 continuous, 0 integer (0 binary)\n",
      "\n",
      "Root relaxation: objective -8.918168e-01, 11 iterations, 0.00 seconds\n",
      "\n",
      "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
      " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
      "\n",
      "*    0     0               0      -0.8918168   -0.89182  0.00%     -    0s\n",
      "\n",
      "Explored 0 nodes (11 simplex iterations) in 0.05 seconds\n",
      "Thread count was 12 (of 12 available processors)\n",
      "\n",
      "Solution count 1: -0.891817 \n",
      "No other solutions better than -0.891817\n",
      "\n",
      "Optimal solution found (tolerance 1.00e-04)\n",
      "Best objective -8.918168365797e-01, best bound -8.918168365797e-01, gap 0.0000%\n"
     ]
    }
   ],
   "source": [
    "sp_model.optimize()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's have a look at the optimization results. Let's observe the minimum hedge error and the optimal parameters respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the hege error is 0.8918168365796761, while it is 9.329017567858573 when hedging is not performed.\n"
     ]
    }
   ],
   "source": [
    "non_hedging_error = sum([abs(c0*exp(0.03)-max(S[100][i]-K,0)) for i in range(300)])/300\n",
    "RHC_SP_hedge_error = sp_model.getJSONSolution()[sp_model.getJSONSolution().find(\"ObjVal\")+10:\\\n",
    "                                                sp_model.getJSONSolution().find(\"ObjBound\")-4]\n",
    "RHC_SP_hedge_error = abs(float(RHC_SP_hedge_error))\n",
    "print('the hege error is '+ str(RHC_SP_hedge_error)+', while it is '+\\\n",
    "     str(non_hedging_error)+' when hedging is not performed.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{(0, 0): 0.23045680181992487,\n",
       " (1, 0): 0.23045680181992492,\n",
       " (1, 1): 0.23045680181992487,\n",
       " (1, 2): 0.23045680181992487,\n",
       " (1, 3): 0.23045680181992487,\n",
       " (1, 4): 0.23045680181992487,\n",
       " (2, 0): 0.0851558316768965,\n",
       " (2, 1): 0.23045680181992487,\n",
       " (2, 2): 0.23045680181992492}"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "optimal_parameters = {}\n",
    "for key in x.keys():\n",
    "    optimal_parameters[key] = x[key].x\n",
    "optimal_parameters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, many of these optimal decision variables are the same. Even if there is a difference, the difference is small. But this is not surprising, because our hedging process takes into account the transaction costs. In many cases, it may be better not to change or less change the holding of the underlying asset. If we make T larger, the difference of optimal variables will increase, and even each decision variable may be different. But that means we need to add more rebalancing points to adapt to the longer time, otherwise, the performance will become worse."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Back test with these optimal parameters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we have to do a very important step, that is to retest the optimal decision variables we obtained as fixed parameters. In this process, we cannot use the underlying asset prices which is previously used to output these parameters, otherwise our back test will be meaningless. If we do that, there is no doubt that our hedging strategy will surpass everything, but it is a kind of cheating, which is equivalent to predicting the future. It is precisely because the future is unpredictable that we designed a hedging strategy, otherwise I would simply quit my job to buy lottery tickets.\n",
    "\n",
    "We regenerate the prices of the underlying asset, then simulate the transaction according to the process described earlier. In order to have a clearer observation, we record the portfolio value at each time point, and then plot them into a curve."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "simulating the hedging process\n",
      "done!\n"
     ]
    }
   ],
   "source": [
    "#Regenerate S\n",
    "S = GBM(mu,sigma,S0,T)\n",
    "\n",
    "#set two dataframe to record the hedging portfolio value and the portfolio value at each time.\n",
    "#As we are considering a hedging process with transaction costs, V(t-) and V(t+) may not be the same number.\n",
    "#For simplicity, we use the value before the trade is made.\n",
    "values = pd.DataFrame(index = [k for k in range(NSim)]\\\n",
    "                 ,columns = [k for k in range(100+1)])\n",
    "V_values = pd.DataFrame(index = [k for k in range(NSim)]\\\n",
    "                 ,columns = [k for k in range(100+1)])\n",
    "c0 = bs_call(S0,K,sigma,T,r=0.03)['c']\n",
    "values[0] = pd.Series([0]*NSim)\n",
    "V_values[0] = pd.Series([c0]*NSim)\n",
    "\n",
    "\n",
    "#perform the hedging with constant parameters.\n",
    "print('simulating the hedging process')\n",
    "for i in range(NSim):\n",
    "    #the decision index\n",
    "    index1 = choose(S[33][i],1)\n",
    "    index2 = choose(S[66][i],2)\n",
    "    \n",
    "    \n",
    "    #the hedging process\n",
    "    shares = 0\n",
    "    money = c0\n",
    "    for step in range(100+1):\n",
    "           \n",
    "        \n",
    "        if step == 0:#trade is made\n",
    "            shares = optimal_parameters[0,0]\n",
    "            money = c0 - S[0][i]*shares - shares*S[0][i]*g\n",
    "            \n",
    "        elif step > 0 and step < 33:\n",
    "            money = money*exp(r*T/100)\n",
    "            V_values[step][i] = money+shares*S[step][i]\n",
    "            values[step][i] = money+shares*S[step][i]-bs_call(S[step][i],K,sigma,(T/100)*(100-step),r)['c']\n",
    "            \n",
    "        elif step == 33:#trade is made\n",
    "            money = money*exp(r*T/100)\n",
    "            V_values[step][i] = money+shares*S[step][i]\n",
    "            values[step][i] = money+shares*S[step][i]-bs_call(S[step][i],K,sigma,(T/100)*(100-step),r)['c']\n",
    "            #trade\n",
    "            pre_shares = shares\n",
    "            pre_v_value = money+shares*S[step][i]\n",
    "            shares = optimal_parameters[1,index1]\n",
    "            money = pre_v_value - S[step][i]*shares -g*S[step][i]*abs(shares-pre_shares)\n",
    "            \n",
    "        elif step > 33 and step < 66:\n",
    "            money = money*exp(r*T/100)\n",
    "            V_values[step][i] = money+shares*S[step][i]\n",
    "            values[step][i] = money+shares*S[step][i]-bs_call(S[step][i],K,sigma,(T/100)*(100-step),r)['c']\n",
    "            \n",
    "        elif step == 66:#trade is made\n",
    "            money = money*exp(r*T/100)\n",
    "            V_values[step][i] = money+shares*S[step][i]\n",
    "            values[step][i] = money+shares*S[step][i]-bs_call(S[step][i],K,sigma,(T/100)*(100-step),r)['c']\n",
    "            #trade\n",
    "            pre_shares = shares\n",
    "            pre_v_value = money+shares*S[step][i]\n",
    "            shares = optimal_parameters[2,index2]\n",
    "            money = pre_v_value - S[step][i]*shares -g*S[step][i]*abs(shares-pre_shares)\n",
    "            \n",
    "        elif step >66 and step != 100:\n",
    "            money = money*exp(r*T/100)\n",
    "            V_values[step][i] = money+shares*S[step][i]\n",
    "            values[step][i] = money+shares*S[step][i]-bs_call(S[step][i],K,sigma,(T/100)*(100-step),r)['c']\n",
    "            \n",
    "        else:\n",
    "            money = money*exp(r*T/100)\n",
    "            V_values[step][i] = money+shares*S[step][i]\n",
    "            values[step][i] = money+shares*S[step][i]-max(S[step][i]-K,0)\n",
    "                      \n",
    "print('done!')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>91</th>\n",
       "      <th>92</th>\n",
       "      <th>93</th>\n",
       "      <th>94</th>\n",
       "      <th>95</th>\n",
       "      <th>96</th>\n",
       "      <th>97</th>\n",
       "      <th>98</th>\n",
       "      <th>99</th>\n",
       "      <th>100</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>-0.057027</td>\n",
       "      <td>-0.316204</td>\n",
       "      <td>0.077678</td>\n",
       "      <td>0.893646</td>\n",
       "      <td>1.043802</td>\n",
       "      <td>0.378602</td>\n",
       "      <td>1.029554</td>\n",
       "      <td>0.419916</td>\n",
       "      <td>1.057062</td>\n",
       "      <td>...</td>\n",
       "      <td>5.178783</td>\n",
       "      <td>4.885266</td>\n",
       "      <td>4.105524</td>\n",
       "      <td>3.8634</td>\n",
       "      <td>3.717481</td>\n",
       "      <td>3.872979</td>\n",
       "      <td>3.323852</td>\n",
       "      <td>3.543512</td>\n",
       "      <td>2.99995</td>\n",
       "      <td>3.146823</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0.391769</td>\n",
       "      <td>1.091542</td>\n",
       "      <td>1.52966</td>\n",
       "      <td>1.207264</td>\n",
       "      <td>1.764104</td>\n",
       "      <td>1.868429</td>\n",
       "      <td>2.088136</td>\n",
       "      <td>2.213035</td>\n",
       "      <td>2.235718</td>\n",
       "      <td>...</td>\n",
       "      <td>4.835856</td>\n",
       "      <td>5.216681</td>\n",
       "      <td>4.907291</td>\n",
       "      <td>4.687089</td>\n",
       "      <td>4.289564</td>\n",
       "      <td>4.796074</td>\n",
       "      <td>5.063974</td>\n",
       "      <td>5.844167</td>\n",
       "      <td>6.141477</td>\n",
       "      <td>6.39985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>-0.071073</td>\n",
       "      <td>-0.365981</td>\n",
       "      <td>-0.72458</td>\n",
       "      <td>-0.446752</td>\n",
       "      <td>-0.372388</td>\n",
       "      <td>-0.388061</td>\n",
       "      <td>-0.09155</td>\n",
       "      <td>0.526892</td>\n",
       "      <td>0.228026</td>\n",
       "      <td>...</td>\n",
       "      <td>4.679236</td>\n",
       "      <td>4.558783</td>\n",
       "      <td>4.387732</td>\n",
       "      <td>4.363564</td>\n",
       "      <td>4.293339</td>\n",
       "      <td>4.202155</td>\n",
       "      <td>4.189941</td>\n",
       "      <td>4.238253</td>\n",
       "      <td>4.283082</td>\n",
       "      <td>4.337152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0.802834</td>\n",
       "      <td>0.532782</td>\n",
       "      <td>0.136686</td>\n",
       "      <td>-0.268971</td>\n",
       "      <td>-0.570683</td>\n",
       "      <td>-0.946389</td>\n",
       "      <td>-2.017576</td>\n",
       "      <td>-2.130781</td>\n",
       "      <td>-1.248977</td>\n",
       "      <td>...</td>\n",
       "      <td>4.01438</td>\n",
       "      <td>4.89747</td>\n",
       "      <td>4.757902</td>\n",
       "      <td>4.594794</td>\n",
       "      <td>5.106271</td>\n",
       "      <td>4.430222</td>\n",
       "      <td>4.995095</td>\n",
       "      <td>4.785386</td>\n",
       "      <td>5.685716</td>\n",
       "      <td>6.651555</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>-0.424658</td>\n",
       "      <td>-0.623116</td>\n",
       "      <td>-0.530347</td>\n",
       "      <td>-1.002927</td>\n",
       "      <td>-1.15566</td>\n",
       "      <td>0.145994</td>\n",
       "      <td>-0.797379</td>\n",
       "      <td>-0.51455</td>\n",
       "      <td>-0.30869</td>\n",
       "      <td>...</td>\n",
       "      <td>4.602889</td>\n",
       "      <td>4.970059</td>\n",
       "      <td>5.510216</td>\n",
       "      <td>5.708839</td>\n",
       "      <td>5.857788</td>\n",
       "      <td>5.805448</td>\n",
       "      <td>5.956107</td>\n",
       "      <td>5.814142</td>\n",
       "      <td>5.778943</td>\n",
       "      <td>6.909854</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>295</th>\n",
       "      <td>0</td>\n",
       "      <td>0.129063</td>\n",
       "      <td>0.456476</td>\n",
       "      <td>0.437475</td>\n",
       "      <td>1.270736</td>\n",
       "      <td>0.235031</td>\n",
       "      <td>0.452252</td>\n",
       "      <td>0.972755</td>\n",
       "      <td>1.142008</td>\n",
       "      <td>1.301067</td>\n",
       "      <td>...</td>\n",
       "      <td>5.346941</td>\n",
       "      <td>5.274122</td>\n",
       "      <td>5.343785</td>\n",
       "      <td>5.474327</td>\n",
       "      <td>5.261981</td>\n",
       "      <td>5.325353</td>\n",
       "      <td>5.212335</td>\n",
       "      <td>5.204316</td>\n",
       "      <td>5.07139</td>\n",
       "      <td>5.047292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>0</td>\n",
       "      <td>0.488278</td>\n",
       "      <td>0.655745</td>\n",
       "      <td>1.031191</td>\n",
       "      <td>1.252027</td>\n",
       "      <td>1.088541</td>\n",
       "      <td>1.713402</td>\n",
       "      <td>1.733892</td>\n",
       "      <td>1.798113</td>\n",
       "      <td>1.873411</td>\n",
       "      <td>...</td>\n",
       "      <td>5.171382</td>\n",
       "      <td>4.808807</td>\n",
       "      <td>4.947419</td>\n",
       "      <td>4.987899</td>\n",
       "      <td>4.597781</td>\n",
       "      <td>4.264246</td>\n",
       "      <td>4.327928</td>\n",
       "      <td>2.695227</td>\n",
       "      <td>5.597434</td>\n",
       "      <td>5.83875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>0</td>\n",
       "      <td>0.636345</td>\n",
       "      <td>0.785896</td>\n",
       "      <td>0.878348</td>\n",
       "      <td>1.02283</td>\n",
       "      <td>0.867989</td>\n",
       "      <td>0.97976</td>\n",
       "      <td>1.557438</td>\n",
       "      <td>1.252998</td>\n",
       "      <td>1.305088</td>\n",
       "      <td>...</td>\n",
       "      <td>4.969113</td>\n",
       "      <td>5.341223</td>\n",
       "      <td>5.259682</td>\n",
       "      <td>5.020607</td>\n",
       "      <td>3.92121</td>\n",
       "      <td>4.738337</td>\n",
       "      <td>5.860248</td>\n",
       "      <td>5.770157</td>\n",
       "      <td>5.132601</td>\n",
       "      <td>5.633844</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>0</td>\n",
       "      <td>-0.020627</td>\n",
       "      <td>0.457591</td>\n",
       "      <td>0.417465</td>\n",
       "      <td>0.919524</td>\n",
       "      <td>0.798985</td>\n",
       "      <td>0.789552</td>\n",
       "      <td>1.039093</td>\n",
       "      <td>1.210106</td>\n",
       "      <td>0.966492</td>\n",
       "      <td>...</td>\n",
       "      <td>-15.539719</td>\n",
       "      <td>-16.372139</td>\n",
       "      <td>-17.850698</td>\n",
       "      <td>-17.215457</td>\n",
       "      <td>-16.700505</td>\n",
       "      <td>-17.679726</td>\n",
       "      <td>-19.059941</td>\n",
       "      <td>-19.580849</td>\n",
       "      <td>-21.198402</td>\n",
       "      <td>-23.35044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>0</td>\n",
       "      <td>-0.475465</td>\n",
       "      <td>-0.162466</td>\n",
       "      <td>0.555595</td>\n",
       "      <td>-0.617583</td>\n",
       "      <td>0.093245</td>\n",
       "      <td>0.204948</td>\n",
       "      <td>-1.176273</td>\n",
       "      <td>-0.141477</td>\n",
       "      <td>-0.725119</td>\n",
       "      <td>...</td>\n",
       "      <td>4.250022</td>\n",
       "      <td>3.147839</td>\n",
       "      <td>0.455908</td>\n",
       "      <td>-0.021995</td>\n",
       "      <td>0.591024</td>\n",
       "      <td>0.563701</td>\n",
       "      <td>-2.273026</td>\n",
       "      <td>-2.617442</td>\n",
       "      <td>-1.339127</td>\n",
       "      <td>-0.502456</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>300 rows × 101 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     0         1         2         3         4         5         6    \\\n",
       "0      0 -0.057027 -0.316204  0.077678  0.893646  1.043802  0.378602   \n",
       "1      0  0.391769  1.091542   1.52966  1.207264  1.764104  1.868429   \n",
       "2      0 -0.071073 -0.365981  -0.72458 -0.446752 -0.372388 -0.388061   \n",
       "3      0  0.802834  0.532782  0.136686 -0.268971 -0.570683 -0.946389   \n",
       "4      0 -0.424658 -0.623116 -0.530347 -1.002927  -1.15566  0.145994   \n",
       "..   ...       ...       ...       ...       ...       ...       ...   \n",
       "295    0  0.129063  0.456476  0.437475  1.270736  0.235031  0.452252   \n",
       "296    0  0.488278  0.655745  1.031191  1.252027  1.088541  1.713402   \n",
       "297    0  0.636345  0.785896  0.878348   1.02283  0.867989   0.97976   \n",
       "298    0 -0.020627  0.457591  0.417465  0.919524  0.798985  0.789552   \n",
       "299    0 -0.475465 -0.162466  0.555595 -0.617583  0.093245  0.204948   \n",
       "\n",
       "          7         8         9    ...        91         92         93   \\\n",
       "0    1.029554  0.419916  1.057062  ...   5.178783   4.885266   4.105524   \n",
       "1    2.088136  2.213035  2.235718  ...   4.835856   5.216681   4.907291   \n",
       "2    -0.09155  0.526892  0.228026  ...   4.679236   4.558783   4.387732   \n",
       "3   -2.017576 -2.130781 -1.248977  ...    4.01438    4.89747   4.757902   \n",
       "4   -0.797379  -0.51455  -0.30869  ...   4.602889   4.970059   5.510216   \n",
       "..        ...       ...       ...  ...        ...        ...        ...   \n",
       "295  0.972755  1.142008  1.301067  ...   5.346941   5.274122   5.343785   \n",
       "296  1.733892  1.798113  1.873411  ...   5.171382   4.808807   4.947419   \n",
       "297  1.557438  1.252998  1.305088  ...   4.969113   5.341223   5.259682   \n",
       "298  1.039093  1.210106  0.966492  ... -15.539719 -16.372139 -17.850698   \n",
       "299 -1.176273 -0.141477 -0.725119  ...   4.250022   3.147839   0.455908   \n",
       "\n",
       "           94         95         96         97         98         99   \\\n",
       "0       3.8634   3.717481   3.872979   3.323852   3.543512    2.99995   \n",
       "1     4.687089   4.289564   4.796074   5.063974   5.844167   6.141477   \n",
       "2     4.363564   4.293339   4.202155   4.189941   4.238253   4.283082   \n",
       "3     4.594794   5.106271   4.430222   4.995095   4.785386   5.685716   \n",
       "4     5.708839   5.857788   5.805448   5.956107   5.814142   5.778943   \n",
       "..         ...        ...        ...        ...        ...        ...   \n",
       "295   5.474327   5.261981   5.325353   5.212335   5.204316    5.07139   \n",
       "296   4.987899   4.597781   4.264246   4.327928   2.695227   5.597434   \n",
       "297   5.020607    3.92121   4.738337   5.860248   5.770157   5.132601   \n",
       "298 -17.215457 -16.700505 -17.679726 -19.059941 -19.580849 -21.198402   \n",
       "299  -0.021995   0.591024   0.563701  -2.273026  -2.617442  -1.339127   \n",
       "\n",
       "          100  \n",
       "0    3.146823  \n",
       "1     6.39985  \n",
       "2    4.337152  \n",
       "3    6.651555  \n",
       "4    6.909854  \n",
       "..        ...  \n",
       "295  5.047292  \n",
       "296   5.83875  \n",
       "297  5.633844  \n",
       "298 -23.35044  \n",
       "299 -0.502456  \n",
       "\n",
       "[300 rows x 101 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "timeline = [i*(T/100) for i in range(101)]\n",
    "valuesline = [values[i].mean() for i in range(101)]\n",
    "plt.plot(timeline,valuesline,color = 'orange')\n",
    "plt.ylabel('portfolio value')\n",
    "plt.xlabel('time')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the hedge error is 0.4933024651460453\n"
     ]
    }
   ],
   "source": [
    "hedge_error = sum([V_values[100][i] - max(S[100][i]-K,0) for i in range(300)])/300\n",
    "print('the hedge error is '+str(abs(hedge_error)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### comparison with Black–Scholes delta hedging"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As a comparison, let's first simulate the situation without any hedging."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "simulating the hedging process\n",
      "done!\n"
     ]
    }
   ],
   "source": [
    "##hold the option without hedging\n",
    "\n",
    "values_non_hedging = pd.DataFrame(index = [k for k in range(NSim)]\\\n",
    "                 ,columns = [k for k in range(100+1)])\n",
    "c0 = bs_call(S0,K,sigma,T,r=0.03)['c']\n",
    "values_non_hedging[0] = pd.Series([0]*NSim)\n",
    "\n",
    "print('simulating the hedging process')\n",
    "for i in range(NSim):\n",
    "    #the decision index\n",
    "    index1 = choose(S[33][i],1)\n",
    "    index2 = choose(S[66][i],2)\n",
    "    \n",
    "    \n",
    "    #the hedging process\n",
    "    money = c0\n",
    "    for step in range(100+1):\n",
    "        if step != 100:\n",
    "            money = money*exp(r*T/100)\n",
    "            values_non_hedging[step][i] = money-bs_call(S[step][i],K,sigma,(T/100)*(100-step),r)['c']\n",
    "        else:\n",
    "            money = money*exp(r*T/100)\n",
    "            values_non_hedging[step][i] = money-max(S[step][i]-K,0)\n",
    "                      \n",
    "print('done!')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, as before, we simulate the trading process of delta hedging, except that the decision variable here becomes the delta value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "simulating the hedging process\n",
      "done!\n"
     ]
    }
   ],
   "source": [
    "##B-S delta dynamic hedging\n",
    "\n",
    "BS_values = pd.DataFrame(index = [k for k in range(NSim)]\\\n",
    "                 ,columns = [k for k in range(100+1)])\n",
    "BS_V_values = pd.DataFrame(index = [k for k in range(NSim)]\\\n",
    "                 ,columns = [k for k in range(100+1)])\n",
    "c0 = bs_call(S0,K,sigma,T,r=0.03)['c']\n",
    "BS_values[0] = pd.Series([0]*NSim)\n",
    "BS_V_values[0] = pd.Series([c0]*NSim)\n",
    "\n",
    "\n",
    "#carry on the hedging with constant parameters.\n",
    "print('simulating the hedging process')\n",
    "for i in range(NSim):\n",
    "    delta0 = bs_call(S[0][i],K,sigma,(T/100)*(100-0),r)['delta']\n",
    "    delta1 = bs_call(S[33][i],K,sigma,(T/100)*(100-33),r)['delta']\n",
    "    delta2 = bs_call(S[66][i],K,sigma,(T/100)*(100-66),r)['delta']\n",
    "    \n",
    "    \n",
    "    #the hedging process\n",
    "    shares = 0\n",
    "    money = c0\n",
    "    for step in range(100+1):\n",
    "           \n",
    "        \n",
    "        if step == 0:#trade is made\n",
    "            shares = delta0\n",
    "            money = c0 - S[0][i]*shares - shares*S[0][i]*g\n",
    "            \n",
    "        elif step > 0 and step < 33:\n",
    "            money = money*exp(r*T/100)\n",
    "            BS_V_values[step][i] = money+shares*S[step][i]\n",
    "            BS_values[step][i] = money+shares*S[step][i]-bs_call(S[step][i],K,sigma,(T/100)*(100-step),r)['c']\n",
    "            \n",
    "        elif step == 33:#trade is made\n",
    "            money = money*exp(r*T/100)\n",
    "            BS_V_values[step][i] = money+shares*S[step][i]\n",
    "            BS_values[step][i] = money+shares*S[step][i]-bs_call(S[step][i],K,sigma,(T/100)*(100-step),r)['c']\n",
    "            #trade\n",
    "            pre_shares = shares\n",
    "            pre_v_value = money+shares*S[step][i]\n",
    "            shares = delta1\n",
    "            money = pre_v_value - S[step][i]*shares -g*S[step][i]*abs(shares-pre_shares)\n",
    "            \n",
    "        elif step > 33 and step < 66:\n",
    "            money = money*exp(r*T/100)\n",
    "            BS_V_values[step][i] = money+shares*S[step][i]\n",
    "            BS_values[step][i] = money+shares*S[step][i]-bs_call(S[step][i],K,sigma,(T/100)*(100-step),r)['c']\n",
    "            \n",
    "        elif step == 66:#trade is made\n",
    "            money = money*exp(r*T/100)\n",
    "            BS_V_values[step][i] = money+shares*S[step][i]\n",
    "            BS_values[step][i] = money+shares*S[step][i]-bs_call(S[step][i],K,sigma,(T/100)*(100-step),r)['c']\n",
    "            #trade\n",
    "            pre_shares = shares\n",
    "            pre_v_value = money+shares*S[step][i]\n",
    "            shares = delta2\n",
    "            money = pre_v_value - S[step][i]*shares -g*S[step][i]*abs(shares-pre_shares)\n",
    "            \n",
    "        elif step >66 and step != 100:\n",
    "            money = money*exp(r*T/100)\n",
    "            BS_V_values[step][i] = money+shares*S[step][i]\n",
    "            BS_values[step][i] = money+shares*S[step][i]-bs_call(S[step][i],K,sigma,(T/100)*(100-step),r)['c']\n",
    "            \n",
    "        else:\n",
    "            money = money*exp(r*T/100)\n",
    "            BS_V_values[step][i] = money+shares*S[step][i]\n",
    "            BS_values[step][i] = money+shares*S[step][i]-max(S[step][i]-K,0)\n",
    "                      \n",
    "print('done!')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's plot the portfolio values of the three over time on a single graph and then compare the hedge error."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "values_non_hedgingline = [values_non_hedging[i].mean() for i in range(101)]\n",
    "BS_valuesline = [BS_values[i].mean() for i in range(101)]\n",
    "plt.plot(timeline,values_non_hedgingline,color = 'red',label = 'no hedging')\n",
    "plt.plot(timeline,valuesline,color = 'orange',label = 'RHC&SP hedging')\n",
    "plt.plot(timeline,BS_valuesline,color = 'blue',label = 'BS delta hedging')\n",
    "plt.xlabel('time')\n",
    "plt.ylabel('portfolio value')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "no hedging          0.676353\n",
       "BS delta hedging    0.667863\n",
       "RHC&SP hedging      0.493302\n",
       "Name: hedge error, dtype: float64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comparision = pd.Series({'no hedging' : abs(values_non_hedgingline[-1]),\\\n",
    "                        'BS delta hedging': abs(BS_valuesline[-1]),\\\n",
    "                        'RHC&SP hedging': abs(valuesline[-1])})\n",
    "comparision = comparision.rename('hedge error')\n",
    "comparision"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It can be seen from the chart that RHC&SP hedging works better than BS delta hedging and non-hedging almost all the time.BS delta hedging doesn't work well because it has three cliff drops and remain relatively lower value.In these scenarios, the cliff drops were the result of large trading costs incurred by the sharp shift in hedged assets as stock prices soared.By contrast, RHC&SP hedging is a little bit more stable, which suggests that the new method is more effective with transaction costs.\n",
    "\n",
    "It's understandable that BS delta hedging is inferior to non-hedging, because BS was proposed without taking transaction costs into account,which results in much more frequent transaction and more transaction costs. BS delta hedging is the most smooth on the whole, but it has three cliff drops at t=0, t =0.04 and t=0.08 due to transaction costs, especially at t =0, which directly causes its net value to remain relatively low in the subsequent process.The portfolio value of RHC&SP hedging features obvious synchronization with the non-hedging one for the reason that they hold short position of call option which is sensitive to stock price booming, but the former is more stable, which indicates its superiority.\n",
    "\n",
    "As for hedge error,RHC&SP hedging is obviously lower than the other two scenarios with an error of 0.493 while the other two scenarios' hedging error are both approsimately 0.67, which means RHC&SP hedging is superior to the other two methods."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusion and discussions\n",
    "- Why do the optimal parameters behave unsteadily?\n",
    "\n",
    "There is a fatal problem in the above simulation process, that is, when we repeat it many times, we find that the optimal decision variables obtained by each simulation are quite different. Moreover, their back test performance is also different. This makes us doubt the reliability of this methology. \n",
    "\n",
    "After analysis, we believe that the main reason is that we have too few Monte Carlo simulations and we have not selected enough rebalancing points. In fact, there is a reason for this. We have to admit that the above implementation of this method depends heavily on the module of gurobipy. However, when using this module, trial users can only test a limited data scale, and license is required to further expand the data scale. This is why in our example, we only set the number of samples to 300 and the rebalancing point to 3.\n",
    "\n",
    "Here we are only to show the essence of this strategy, and its optimal parameters may not have practical significance. However, we have no reason to doubt that when we expand the sample size and increase the rebalancing points, the parameter stability will be improved, and the performance of this methology will be much better than that of the traditional delta hedging — especially when there are transaction costs.\n",
    "-  Some areas of flexibility of this methodology\n",
    "\n",
    "Compared to the traditional Black-Merton-Scholes dynamic hedging model, this model is more flexible in various aspects. \n",
    "\n",
    "The first is the ease with which we can input any objective function we would like into the methodology, any objective function can get the optimal value in this model. For example, sometimes we use the utility function as the objective function, which is widely used in financial economics. \n",
    "\n",
    "The second is that this method can be applied to both one and multi-dimensional options. This means that we can solve the optimal case with more complex portfolio under this model. (Limited to time, we only show the case of single option hedging).\n",
    "\n",
    "The third is that this methodology can easily be used with any model of asset dynamics for the underlying. This shows the high suitability of the underlying portfolio form of the model. \n",
    "\n",
    "To sum up, when we change the definite hedging strategy into a more variable optimization model, although it makes everything more complex, it has been greatly improved, not only in performance but also in flexibility. When we ask it for the optimal solutions instead of establishing a specific way to calculate the recommended holding numbers, it provides us more possibilities. I increasingly believe that the sentence 'Let it go' makes perfect sense.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Reference\n",
    "\n",
    "[1]  Peter J. Meindl & James A. Primbs (2008) Dynamic hedging of single and\n",
    "multi-dimensional options with transaction costs: a generalized utility maximization approach, Quantitative Finance, 8:3, 299-312\n",
    "\n",
    "[2] Jacob Mattingley, Yang Wang, and Stephen Boyd (2011) Receding Horizon Control, IEEE CONTROL SYSTEMS MAGAZINE, 10.1109/MCS.2011.940571\n",
    "\n",
    "[3] Alexander Shapiro (2001) MONTE CARLO SIMULATION APPROACH TO STOCHASTIC PROGRAMMING, School of Industrial & Systems Engineering Georgia Institute of Technology Atlanta, Georgia 30332, U.S.A.\n"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
